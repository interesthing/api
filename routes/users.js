var express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
var router = express.Router();
const User = require('../models/user');
const secretKey = process.env.SECRET_KEY || 'changeme';

/* Middlewares */

// Middleware to get some user information
function loadUserFromParams(req, res, next) {
  User.findById(req.params.id).exec(function(err, user) {
    if (err) {
      return next(err);
    } else if (!user) {
      return res.status(404).send('Aucun utilisateur trouvé pour l\'ID : ' + req.params.id);
    }
    req.user = user;
    next();
  });
}

// Authenticate middleware
function authenticate(req, res, next) {

  // Control if header is present 
  const authorization = req.get('Authorization');
  if (!authorization) {
    return res.status(401).send('Le header d\'autorisation est manquant.');
  }

  // Header good format control
  const match = authorization.match(/^Bearer (.+)$/);
  if (!match) {
    return res.status(401).send('Le header d\'autorisation n\est pas au bon format (bearer token)');
  }

  // Extract and verify the JWT
  const token = match[1];
  jwt.verify(token, secretKey, function(err, payload) {
    if (err) {
      return res.status(401).send('Votre token(JsonWebToken) est invalide ou a expiré.');
    } else {
      req.currentUserId = payload.sub;
      // Send the authenticate user id to the next middleware
      next(); 
    }
  });
}

/* GET ROUTES */

/**
 * @api {get} /api/users Retrieve users list
 * @apiName GetUsers
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieve a list of users.
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: http://api/user
 *
 *     [
 *       {
 *         "_id": "5dc3ef678f3f0a0e72086292",
 *         "username": "eddy.malou",
 *         "email": "edy.malou@congo.co",
 *         "imgProfil": "ma-photo.jpg",
 *         "__v": 0
 *       },
 * 		 {
 *         "_id": "5dc3ef678f3f0a0e63548579",
 *         "username": "marlan.sadvakas",
 *         "email": "marlan.sadvakas@biensur.io",
 *         "imgProfil": "photo-de-moi.jpg",
 *         "__v": 0
 *       },
 *     ]
 */
router.get('/', function(req, res, next) {

  User.find().sort('username').exec(function(err, users) {
    if (err) {
      return next(err);
    }
    res.send(users);
  });
});

/**
 * @api {get} /api/users/:id Retrieve user
 * @apiName RetrieveUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one user.
 *
 * @apiExample Example
 *     GET /api/users/5dc3ef678f3f0a0e72086292 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "_id": "5dc3ef678f3f0a0e72086292",
 *       "username": "eddy.malou",
 *       "email": "edy.malou@congo.co",
 *       "imgProfil": "ma-photo.jpg",
 *       "__v": 0
 *     }
 */
router.get('/:id', loadUserFromParams, function(req, res, next) {
 res.send(req.user);
});

/* POST ROUTES */

/**
 * @api {post} /api/users Create user
 * @apiName CreateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Register a new user.
 *
 * @apiSuccess (Response body) {String} id A unique identifier for the user generated by the server
 *
 * @apiExample Example
 *     POST /api/user HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "username": "eddy.malou",
 *       "email": "edy.malou@congo.co",
 *       "password": "123456789",
 * 		 "imgProfil": "ma-photo.jpg"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: http://localhost:3000/user/5dc3ef678f3f0a0e72086292
 *
 *     {
 *       "_id": "5dc3ef678f3f0a0e72086292",
 *       "username": "eddy.malou",
 *       "email": "edy.malou@roller.co",
 *       "imgProfil": "ma-photo.jpg",
 *       "__v": 0
 *     }
 */
router.post('/', function(req, res, next) {

	// Bcrypt config
	const plainPassword = req.body.password;
  	const saltRounds = 10;

  	// Password hash
  	bcrypt.hash(plainPassword, saltRounds, function(err, hashedPassword) {
	    if (err) {
	      return next(err);
	    }

	    const newUser = new User(req.body);
	    newUser.password = hashedPassword;
	    newUser.save(function(err, savedUser) {
		      if (err) {
		        return next(err);
		      }

		    res.status(201)
		      	// Add ${config.baseUrl} //
		      	.set('Location', `/users/${savedUser._id}`)
		      	.send(savedUser);
	  	});
	});
});

/**
 * @api {post} /login Login user
 * @apiName UserLogin
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Authenticate a user.
 * 
 */
router.post('/login', function(req, res, next) {

	// Find user with his username
	User.findOne({ username: req.body.username }).exec(function(err, user) {
	    if (err) {
	      return next(err);
	    } else if (!user) {
	      return res.sendStatus(401);
	    }

	    bcrypt.compare(req.body.password, user.password, function(err, valid) {
	      if (err) {
	        return next(err);
	      } else if (!valid) {
	        return res.sendStatus(401);
	      }

		  // Generate JWT (JsonWebToken) during 7 days
	      const exp = (new Date().getTime() + 7 * 24 * 3600 * 1000) / 1000;
	      const claims = { sub: user._id.toString(), exp: exp };

	      jwt.sign(claims, secretKey, function(err, token){
		        if (err) { return next(err); }
			        // Send client token
			        // res.send(`token : ${token} !`);
			        res.send({ token: token });
		    });
	    });
  	})
});

/* PUT Routes */
/**
 * @api {put} /api/user/:id Update user
 * @apiName UpdateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Modify a user (Authentificate & only himself can change).
 *
 * @apiExample Example
 *     PUT /api/user/5dc3ef678f3f0a0e72086292 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "username": "tricky.towers",
 *       "email": "tricky.towers@exemple.com",
 *       "password": "987654321",
 * 		 "imgProfil": "mon-autre-photo.jpg"
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "_id": "5dc3ef678f3f0a0e72086292",
 *       "username": "tricky.towers",
 *       "email": "tricky.towers@exemple.com",
 * 		 "password": "987654321",
 *       "imgProfil": "mon-autre-photo.jpg",
 *       "__v": 1
 *     }
 */
router.put('/:id', authenticate, loadUserFromParams, function(req, res, next){

	// const currentUserId = req.currentUserId;

	// Authorization control : the user can only modify himself
    if (req.currentUserId !== req.user._id.toString()){
      return res.status(403).send('Vous n\'avez pas le droit de modification(PUT) sur cette ressource.')
    }

    // Config bcrypt
	const plainPassword = req.body.password;
  	const saltRounds = 10;

  	// Hachage
  	bcrypt.hash(plainPassword, saltRounds, function(err, hashedPassword) {
	    if (err) {
	      return next(err);
	    }

	req.user.password = hashedPassword;
	req.user.username = req.body.username;
	req.user.email = req.body.email;
	req.user.imgProfil = req.body.imgProfil;

	req.user.save(function(err, updatedUser){
	if (err){
		      return next(err);
		    }
		    res.send(updatedUser);
	    });
  	});
});

/* PATCH ROUTES */

/**
 * @api {patch} /user/:id Partially update a user
 * @apiName UpdateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Partially update a user.
 *
 * @apiExample Example
 *     PATCH /api/people/58b2926f5e1def0123e97bc0 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "username": "eddy.roller",
 *       "imgProfil": "mon-autre-photo.jpg"
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "_id": "5dc3ef678f3f0a0e72086292",
 *       "username": "eddy.roller",
 *       "email": "eddy.malou@congo.co",
 * 		 "password": "123456789"
 * 		 "imgProfil": "mon-autre-photo.jpg",
 *       "__v": 1
 *     }
 */
router.patch('/:id', authenticate, loadUserFromParams, function(req, res, next) {

	// Contrôle des autorisations : l'utilisateur ne peut que modifier ses informations propres.
    if (req.currentUserId !== req.user._id.toString()){
      return res.status(403).send('Vous n\'avez pas le droit de modification partielle (PATCH) sur cette ressource.')
    }
	
	// Mets à jour l'utilisateur en fonction des params présents ou non dans req.body 
	  if (req.body.username !== undefined) {
	    req.user.username = req.body.username;
	  }

	  if (req.body.email !== undefined) {
	   	req.user.email = req.body.email;
	  }

	  if (req.body.imgProfil !== undefined) {
	    req.user.imgProfil = req.body.imgProfil;
	  }

	  if (req.body.password !== undefined) {
	  	// Config bcrypt
		const plainPassword = req.body.password;
	  	const saltRounds = 10;

	  	// Hachage
	  	bcrypt.hash(plainPassword, saltRounds, function(err, hashedPassword) {
		    if (err) {
		     	return next(err);
		    }
	   	 	req.user.password = hashedPassword;
	  		
			req.user.save(function(err, modifiedPerson){
		    	if (err) {
		      		return next(err);
		    	}
		    res.send(modifiedPerson);

		  	});
	  	});
	  }else{

	  	req.user.save(function(err, modifiedPerson){
	    if (err) {
	      return next(err);
	    }
	    res.send(modifiedPerson);
	  });
  	}
});

/* Routes en DELETE */
/**
 * @api {delete} /api/user/:id Delete user
 * @apiName DeleteUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes a user.
 *
 * @apiExample Example
 *     DELETE /api/user/5dc3ef678f3f0a0e72086292 HTTP/1.1
 *
 * @apiSuccessExample 204 No Content
 *     HTTP/1.1 204 No Content
 */
router.delete('/:id', authenticate, loadUserFromParams, function(req, res, next) {

	// Contrôle des autorisations : l'utilisateur ne peut que se modifier lui-même
    if (req.currentUserId !== req.user._id.toString()){
      return res.status(403).send('Vous n\'avez pas le droit de suppression (DELETE) sur cette ressource.')
    }

  	req.user.remove(function(err) {
    if (err) { return next(err); }
    	res.sendStatus(204);
  });
});

/**
 * @apiDefine UserIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the user to retrieve
 */

/**
 * @apiDefine UserInRequestBody
 * @apiParam (Request body) {String{3..30}} username The username of the user (must be unique)
 * @apiParam (Request body) {String{3..100}} email The email of the user (must be unique)
 * @apiParam (Request body) {String} password The password of the user
 * @apiParam (Request body) {String} imgProfil The profil image of the user 
 */

/**
 * @apiDefine UserInResponseBody
 * @apiSuccess (Response body) {String} _id The unique identifier of the user
 * @apiSuccess (Response body) {String} username The username of the user
 * @apiSuccess (Response body) {String} email The email of the user
 * @apiSuccess (Response body) {String} imgProfil The profil image of the user
 * @apiSuccess (Response body) {String} __v The version number of the user
 */

/**
 * @apiDefine UserNotFoundError
 *
 * @apiError {Object} 404/NotFound No user was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No user found with ID 5dc3ef678f3f0a0e72086292
 */

/**
 * @apiDefine UserValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the user's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Username validation failed",
 *       "errors": {
 *         "username": {
 *           "kind": "minlength",
 *           "message": "Path `username` (`0`) is shorter than the minimum allowed length (3).",
 *           "name": "ValidatorError",
 *           "path": "username",
 *           "properties": {
 *             "message": "Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length (3).",
 *             "minlength": 3,
 *             "path": "username",
 *             "type": "minlength",
 *             "value": "0"
 *           },
 *           "value": "0"
 *         }
 *       }
 *     }
 */

module.exports = router;